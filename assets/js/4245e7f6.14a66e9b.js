"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[611],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),o=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=o(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=o(t),u=a,g=d["".concat(c,".").concat(u)]||d[u]||m[u]||s;return t?r.createElement(g,i(i({ref:n},p),{},{components:t})):r.createElement(g,i({ref:n},p))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var o=2;o<s;o++)i[o]=t[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},372:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var r=t(7462),a=(t(7294),t(3905));const s={sidebar_label:"service",title:"services.service"},i=void 0,l={unversionedId:"reference/backend/services/service",id:"reference/backend/services/service",title:"services.service",description:"Service Objects",source:"@site/docs/reference/backend/services/service.md",sourceDirName:"reference/backend/services",slug:"/reference/backend/services/service",permalink:"/docs/reference/backend/services/service",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"service",title:"services.service"},sidebar:"backendSidebar",previous:{title:"network_service",permalink:"/docs/reference/backend/services/network_service"},next:{title:"service_context",permalink:"/docs/reference/backend/services/service_context"}},c={},o=[{value:"Service Objects",id:"service-objects",level:2},{value:"__init__",id:"__init__",level:4},{value:"message_handler",id:"message_handler",level:4},{value:"name",id:"name",level:4},{value:"message_builder",id:"message_builder",level:4}],p={toc:o},d="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"service-objects"},"Service Objects"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@typing.final\nclass Service(MessageService)\n")),(0,a.kt)("p",null,"Base service class providing easy message handler mapping."),(0,a.kt)("p",null,"A service can be seen as the bridge between the inner workings of a component (represented by a ",(0,a.kt)("inlineCode",{parentName:"p"},"Core"),") and the\noutside component domain."),(0,a.kt)("p",null,"Services register the various message handlers that are called when a certain message is received by the message bus and\ndispatched locally. They also create instances of ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceContext")," (or a subclass) that represent a single ",(0,a.kt)("em",{parentName:"p"},"unit of work"),"\nwhen executing a message handler."),(0,a.kt)("p",null,"Message handlers are defined using the ",(0,a.kt)("inlineCode",{parentName:"p"},"message_handler")," decorator, as can be seen in this example (",(0,a.kt)("inlineCode",{parentName:"p"},"svc")," being a ",(0,a.kt)("inlineCode",{parentName:"p"},"Service")," instance)::"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"@svc.message_handler(&quot;msg/event&quot;, Event)\ndef h(msg: Event, ctx: ServiceContext) -&gt; None:\n    ctx.logger.info(f&quot;EVENT HANDLER CALLED&quot;)\n")),(0,a.kt)("h4",{id:"__init__"},"_","_","init","_","_"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def __init__(comp_id: UnitID,\n             name: str,\n             *,\n             message_bus: MessageBusProtocol,\n             context_type: type[ServiceContextType] = ServiceContext)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"comp_id")," - The global component identifier."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name")," - The service name."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message_bus")," - The global message bus."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"context_type")," - The type to use when creating a service context.")),(0,a.kt)("h4",{id:"message_handler"},"message","_","handler"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'def message_handler(\n    message_type: type[MessageType] = Message,\n    *,\n    name_filter: str = "",\n    is_async: bool = False\n) -> typing.Callable[[MessageHandler], MessageHandler]\n')),(0,a.kt)("p",null,"A decorator to declare a message handler."),(0,a.kt)("p",null,"To define a new message handler, use the following pattern::"),(0,a.kt)("p",null,"@svc.message_handler(",'"',"msg/event",'"',", Event)\ndef h(msg: Event, ctx: ServiceContext) -",">"," None:\nctx.logger.info(f",'"',"EVENT HANDLER CALLED",'"',")"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"message_type")," - The type of the message."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"name_filter")," - A more generic message name filter to match against; wildcards (*) are supported as well."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"is_async")," - Whether to execute the handler asynchronously in its own thread.")),(0,a.kt)("h4",{id:"name"},"name"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef name() -> str\n")),(0,a.kt)("p",null,"The name of this service."),(0,a.kt)("h4",{id:"message_builder"},"message","_","builder"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"@property\ndef message_builder() -> MessageBuilder\n")),(0,a.kt)("p",null,"The service","'","s message builder."))}m.isMDXComponent=!0}}]);