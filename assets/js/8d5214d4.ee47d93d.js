"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3170],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var a=r.createContext({}),c=function(e){var t=r.useContext(a),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(a.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),g=i,k=d["".concat(a,".").concat(g)]||d[g]||u[g]||o;return n?r.createElement(k,s(s({ref:t},p),{},{components:n})):r.createElement(k,s({ref:t},p))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=g;var l={};for(var a in t)hasOwnProperty.call(t,a)&&(l[a]=t[a]);l.originalType=e,l[d]="string"==typeof e?e:i,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},6991:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_label:"network_setting_ids",title:"settings.network_setting_ids"},s=void 0,l={unversionedId:"reference/backend/settings/network_setting_ids",id:"reference/backend/settings/network_setting_ids",title:"settings.network_setting_ids",description:"NetworkServerSettingIDs Objects",source:"@site/docs/reference/backend/settings/network_setting_ids.md",sourceDirName:"reference/backend/settings",slug:"/reference/backend/settings/network_setting_ids",permalink:"/hello-world/docs/reference/backend/settings/network_setting_ids",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"network_setting_ids",title:"settings.network_setting_ids"},sidebar:"backendSidebar",previous:{title:"general_setting_ids",permalink:"/hello-world/docs/reference/backend/settings/general_setting_ids"},next:{title:"configuration",permalink:"/hello-world/docs/reference/backend/utils/config/configuration"}},a={},c=[{value:"NetworkServerSettingIDs Objects",id:"networkserversettingids-objects",level:2},{value:"NetworkClientSettingIDs Objects",id:"networkclientsettingids-objects",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"networkserversettingids-objects"},"NetworkServerSettingIDs Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class NetworkServerSettingIDs()\n")),(0,i.kt)("p",null,"Identifiers for server-specific networking settings."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ALLOWED_ORIGINS")," - A comma-separated list of allowed origins; use the asterisk (*) to allow all (value type: ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IDLE_TIMEOUT")," - The time (in seconds) until idle clients will be disconnected automatically; set to 0 to disable.")),(0,i.kt)("h2",{id:"networkclientsettingids-objects"},"NetworkClientSettingIDs Objects"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class NetworkClientSettingIDs()\n")),(0,i.kt)("p",null,"Identifiers for client-specific networking settings."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SERVER_ADDRESS")," - The address of the server the client should automatically connect to (value type: ",(0,i.kt)("inlineCode",{parentName:"li"},"string"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CONNECTION_TIMEOUT")," - The maximum time (in seconds) for connection attempts (value type: ",(0,i.kt)("inlineCode",{parentName:"li"},"float"),").")))}u.isMDXComponent=!0}}]);