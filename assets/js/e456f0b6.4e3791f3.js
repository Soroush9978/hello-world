"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1014],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),i=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=i(r),d=n,m=p["".concat(s,".").concat(d)]||p[d]||f[d]||o;return r?a.createElement(m,c(c({ref:t},u),{},{components:r})):a.createElement(m,c({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,c=new Array(o);c[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,c[1]=l;for(var i=2;i<o;i++)c[i]=r[i];return a.createElement.apply(null,c)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3811:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_label:"project_features",title:"data.entities.features.project_features"},c=void 0,l={unversionedId:"reference/backend/data/entities/features/project_features",id:"reference/backend/data/entities/features/project_features",title:"data.entities.features.project_features",description:"ProjectFeatures Objects",source:"@site/docs/reference/backend/data/entities/features/project_features.md",sourceDirName:"reference/backend/data/entities/features",slug:"/reference/backend/data/entities/features/project_features",permalink:"/hello-world/docs/reference/backend/data/entities/features/project_features",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"project_features",title:"data.entities.features.project_features"},sidebar:"backendSidebar",previous:{title:"project_feature",permalink:"/hello-world/docs/reference/backend/data/entities/features/project_feature"},next:{title:"project",permalink:"/hello-world/docs/reference/backend/data/entities/project"}},s={},i=[{value:"ProjectFeatures Objects",id:"projectfeatures-objects",level:2},{value:"features_dict",id:"features_dict",level:4}],u={toc:i},p="wrapper";function f(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"projectfeatures-objects"},"ProjectFeatures Objects"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"@dataclass_json\n\n@dataclass(frozen=True, kw_only=True)\nclass ProjectFeatures()\n")),(0,n.kt)("p",null,"Superordinate data for all ",(0,n.kt)("strong",{parentName:"p"},"Project")," features."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"metadata")," - The metadata project feature."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"dmp")," - The data management plan feature.")),(0,n.kt)("h4",{id:"features_dict"},"features","_","dict"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"def features_dict(\n    *,\n    selected_features: typing.List[ProjectFeatureID] | None = None\n) -> typing.Dict[ProjectFeatureID, ProjectFeature]\n")),(0,n.kt)("p",null,"Returns all or selected features as a dictionary (feature ID -",">"," feature)."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"selected_features")," - Optional feature ID selection that should be returned.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Returns"),":"),(0,n.kt)("p",null,"  A dictonary containing the selected (or all) features."))}f.isMDXComponent=!0}}]);